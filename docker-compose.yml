services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - integration-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    command: >
      bash -c "
      /etc/confluent/docker/run &
      sleep 10 &&
      kafka-topics --create --if-not-exists --topic grupo4-topic --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 &&
      wait
      "
    networks:
      - integration-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      retries: 5
      start_period: 30s


  producer:
    build:
      context: ./Task_3/producer
      dockerfile: Dockerfile
    container_name: producer_app
    restart: always
    ports:
      - "8080:8080"
    networks:
      - integration-network
    depends_on:
      kafka:
        condition: service_healthy # Espera hasta que Kafka esté listo
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092 # Pasa la configuración correcta de Kafka

  consumer:
    build:
      context: ./Task_3/consumer
      dockerfile: Dockerfile
    container_name: consumer_app
    restart: always
    ports:
      - "8081:8081"
    networks:
      - integration-network
    depends_on:
      kafka:
        condition: service_healthy # Espera hasta que Kafka esté listo
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092 # Pasa la configuración correcta de Kafka

  graphql:
    build:
      context: ./Task_7/Integracion_Proyecto_Final
      dockerfile: Dockerfile
    container_name: graphql_server
    restart: always
    ports:
      - "4000:4000"
    networks:
      - integration-network
    environment:
      - NODE_ENV=production
      - JWT_SECRET=mi_super_secreto
      - REST_SERVICE_URL=http://producer_app:8080/kafka/send
      - GRPC_SERVICE_HOST=grpc-service:50051
    depends_on:
      - producer

networks:
  integration-network:
    driver: bridge
