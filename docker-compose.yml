services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - integration-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    command: >
      bash -c "
      /etc/confluent/docker/run &
      sleep 10 &&
      kafka-topics --create --if-not-exists --topic grupo4-topic --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 &&
      wait
      "
    networks:
      - integration-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      retries: 5
      start_period: 30s

  producer:
    build:
      context: ./Task_3/producer
      dockerfile: Dockerfile
    container_name: producer_app
    restart: always
    ports:
      - "8080:8080"
    networks:
      - integration-network
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  consumer:
    build:
      context: ./Task_3/consumer
      dockerfile: Dockerfile
    container_name: consumer_app
    restart: always
    ports:
      - "8081:8081"
    networks:
      - integration-network
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  graphql:
    build:
      context: ./Task_7/Integracion_Proyecto_Final
      dockerfile: Dockerfile
    container_name: graphql_server
    restart: always
    ports:
      - "4000:4000"
    networks:
      - integration-network
    environment:
      NODE_ENV: production
      JWT_SECRET: mi_super_secreto
      REST_SERVICE_URL: http://producer_app:8080/kafka/send
      GRPC_SERVICE_HOST: grpc-service:50051
    depends_on:
      - producer

  kong-database:
    image: postgres:13
    container_name: kong-database
    restart: always
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    ports:
      - "5432:5432"
    networks:
      - integration-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  kong-migrations:
    image: kong:latest
    container_name: kong-migrations
    user: root
    depends_on:
      kong-database:
        condition: service_healthy
    volumes:
      - ./Task_2/setup_kong.sh:/Task_2/setup_kong.sh
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - integration-network
    entrypoint: |
      /bin/sh -c "
      set -e;
      apt-get update && apt-get install -y curl &&
      kong migrations bootstrap &&
      kong migrations finish &&
      ls -l /Task_2/setup_kong.sh && /Task_2/setup_kong.sh
      "

  kong:
    image: kong:latest
    container_name: kong
    restart: always
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_ADMIN_GUI_HOST: 0.0.0.0
      KONG_ADMIN_GUI_PORT: 8002
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
    volumes:
      - kong-data:/usr/local/kong
    networks:
      - integration-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001"]
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 5s

networks:
  integration-network:
    driver: bridge

volumes:
  kong-data:
